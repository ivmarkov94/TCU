##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [4.1.0] date: [Tue Dec 26 12:56:14 BDT 2023] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = BL


######################################
# building variables
######################################
PATH_PROJECT := $(realpath $(dir $(lastword $(MAKEFILE_LIST))))
ROOT := $(PATH_PROJECT)/..
# debug build?
DEBUG = 1
# optimization
OPT = -Og
# checking stack and heap sizes
CHECK_STACK_HEAP = N

# to detect bootloader fw
BL_FW = Y


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
Core/Src/main.c \
Core/Src/gpio.c \
Core/Src/usart.c \
Core/Src/iwdg.c \
Core/Src/bl_logic.c \
$(ROOT)/common/Core/Src/stm32f1xx_it.c \
$(ROOT)/common/Core/Src/usart_console.c \
$(ROOT)/common/Drivers/system_stm32f1xx.c \
$(ROOT)/common/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_gpio.c \
$(ROOT)/common/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_rcc.c \
$(ROOT)/common/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_utils.c \
$(ROOT)/common/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_exti.c \
$(ROOT)/common/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_pwr.c \
$(ROOT)/common/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_usart.c \
$(ROOT)/common/Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_ll_dma.c

# ASM sources
ASM_SOURCES =  \
$(ROOT)/common/startup_stm32f103xb.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
LD  = $(CC) -E -P -x 
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m3

# fpu
# NONE for Cortex-M0/M0+/M3

# float-abi


# mcu
MCU = $(CPU) -mthumb $(FPU)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DSTM32F103xB \
-DUSE_FULL_LL_DRIVER \
-DHSE_VALUE=8000000 \
-DHSE_STARTUP_TIMEOUT=100 \
-DLSE_STARTUP_TIMEOUT=5000 \
-DLSE_VALUE=32768 \
-DHSI_VALUE=8000000 \
-DLSI_VALUE=40000 \
-DVDD_VALUE=3300 \
-DPREFETCH_ENABLE=1\
-DBOOTLOADER=1


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-ICore/Inc \
-I$(ROOT)/common/Core/Inc \
-I$(ROOT)/common/Drivers/CMSIS/Include  \
-I$(ROOT)/common/Drivers/STM32F1xx_HAL_Driver/Inc \
-I$(ROOT)/common/Drivers/CMSIS/Device/ST/STM32F1xx/Include \
-I$(ROOT)/common/Drivers/CMSIS/Include

# $(info C_INCLUDES $(C_INCLUDES))

# makefiles
include $(ROOT)/common/ld_settings.mk
include $(ROOT)/common/time_utils/time_utils.mk
include $(ROOT)/common/ring_buffer/ring_buffer.mk
include $(ROOT)/common/internal_flash/internal_flash.mk

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS += $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections -Werror

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif

ifeq ($(CHECK_STACK_HEAP), Y)
C_DEFS += -DCHECK_STACK_HEAP
endif

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT_BASE = $(ROOT)/common/STM32F103C8Tx_FLASH.ld
LDSCRIPT = $(BUILD_DIR)/preproccesor_script.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(LDSCRIPT) $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).bin $(BUILD_DIR)/$(TARGET).hex end.print


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c $(MAKEFILE_LIST) | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s $(MAKEFILE_LIST) | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(LDSCRIPT) $(OBJECTS) $(MAKEFILE_LIST)
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR) 
	$(BIN) $< $@	

$(BUILD_DIR)/%.ld: $(LDSCRIPT_BASE) $(MAKEFILE_LIST) | $(BUILD_DIR) 
	$(LD) c $< $(C_DEFS) -o $@ 	 
	
$(BUILD_DIR):
	mkdir $@

%.print:
	$(info <$(FW_NAME) FW> START ADDR: $(FW_START_ADDRES), SIZE: $(FW_MAX_SIZE))		
#######################################
# clean up
#######################################
clean:
ifeq ($(shell uname), Linux)
	rm build/*
else
	del /f /s /q $(BUILD_DIR)
endif

#######################################
# flash
#######################################
flash:
	openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -c "program $(BUILD_DIR)/$(TARGET).hex verify exit reset"
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
